// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.Context;

#nullable disable

namespace UserService.Migrations
{
    [DbContext(typeof(DbApplicationContext))]
    [Migration("20221129110550_First_migration")]
    partial class Firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserService.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityInfoId")
                        .HasColumnType("int");

                    b.Property<string>("DoorDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityInfoId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityInfoId = 1,
                            DoorDesignation = "tv",
                            Floor = 3,
                            HouseNumber = "94A",
                            StreetName = "Skovledet"
                        },
                        new
                        {
                            Id = 2,
                            CityInfoId = 5,
                            Floor = 2,
                            HouseNumber = "23",
                            StreetName = "Cphbusinessvej"
                        });
                });

            modelBuilder.Entity("UserService.Models.CityInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CityInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Hillerød",
                            ZipCode = "3400"
                        },
                        new
                        {
                            Id = 2,
                            City = "Fredensborg",
                            ZipCode = "3480"
                        },
                        new
                        {
                            Id = 3,
                            City = "Taastrup",
                            ZipCode = "2630"
                        },
                        new
                        {
                            Id = 4,
                            City = "Hedehusene",
                            ZipCode = "2640"
                        },
                        new
                        {
                            Id = 5,
                            City = "Charlottenlund",
                            ZipCode = "2920"
                        },
                        new
                        {
                            Id = 6,
                            City = "",
                            ZipCode = "3000"
                        });
                });

            modelBuilder.Entity("UserService.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleType = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            RoleType = "DeliveryPerson"
                        },
                        new
                        {
                            Id = 3,
                            RoleType = "RestaurantOwner"
                        });
                });

            modelBuilder.Entity("UserService.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            CreatedAt = new DateTime(2022, 11, 29, 11, 5, 50, 435, DateTimeKind.Utc).AddTicks(8521),
                            Email = "phillip.andersen1999@gmail.com",
                            FirstName = "Phillip",
                            ModifiedAt = new DateTime(2022, 11, 29, 11, 5, 50, 435, DateTimeKind.Utc).AddTicks(8522),
                            Password = "$2a$11$Yk2U4SyytJBzKG8aMyf27.fvvc9Qw9qFpxuPoPX/xU0V8cyNvwB.G",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            CreatedAt = new DateTime(2022, 11, 29, 11, 5, 50, 548, DateTimeKind.Utc).AddTicks(2305),
                            Email = "lukasbangstoltz@gmail.com",
                            FirstName = "Lukas",
                            ModifiedAt = new DateTime(2022, 11, 29, 11, 5, 50, 548, DateTimeKind.Utc).AddTicks(2316),
                            Password = "$2a$11$Qjq63Y9T/g1Ye5YlUmmPVOfBh/SVoSlJP/qZKrPznX7XuL4gmPU/i",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 2,
                            CreatedAt = new DateTime(2022, 11, 29, 11, 5, 50, 661, DateTimeKind.Utc).AddTicks(2520),
                            Email = "christofferiw@gmail.com",
                            FirstName = "Christoffer",
                            ModifiedAt = new DateTime(2022, 11, 29, 11, 5, 50, 661, DateTimeKind.Utc).AddTicks(2524),
                            Password = "$2a$11$.OUQUdFRTi.oRYa6eWq9nOQsV1I8yyDEalJVPnOKslLjlg13Qx8ba",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("UserService.Models.Address", b =>
                {
                    b.HasOne("UserService.Models.CityInfo", "CityInfo")
                        .WithMany("Addresses")
                        .HasForeignKey("CityInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityInfo");
                });

            modelBuilder.Entity("UserService.Models.User", b =>
                {
                    b.HasOne("UserService.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Models.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserService.Models.CityInfo", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("UserService.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
